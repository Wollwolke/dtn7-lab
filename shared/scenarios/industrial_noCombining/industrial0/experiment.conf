# BEWARE: this config is sourced by bash, shell syntax rules apply!

NAME=industrial_noCombining_0

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=industrial0.xml

# optional core automator recording, will be played in a loop
# AUTOMATOR=three_nodes.pos

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnproxy"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

# commands to daemonize at beginning of simulation, e.g., dtnd
# START_DAEMONIZED=("dtnd -c /shared/configs/dtn7.toml -n $(hostname) -d &> dtnd.log")

# usually commands started at the beginning of the simulation are put here for shutdown
# SHUTDOWN_PROCS="dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=4330

COLLECT_EVERYTHING=0

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
pre() {
    mkdir -p /root/.ros/log
    cea 'dtnd -c /shared/configs/dtn7.toml -n $(hostname) &> dtnd.log &'
}

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    cexec base "export ROS_DOMAIN_ID=1 && source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/base.toml &> dtnproxy.log &"
    sleep 1
    # dtnproxy
    cexec robot0 "export ROS_DOMAIN_ID=2 && source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/robot0.toml &> dtnproxy.log &"
    cexec robot1 "export ROS_DOMAIN_ID=3 && source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/robot1.toml &> dtnproxy.log &"
    cexec robot2 "export ROS_DOMAIN_ID=4 && source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/robot2.toml &> dtnproxy.log &"
    # bags
    cexec robot0 "export ROS_DOMAIN_ID=2 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim playRosbag.py /shared/bags/70m_robot_tf -t /tf_static /humidity /temperature /detectedImages /status/battery /status/tempSensor &> player.log &"
    cexec robot1 "export ROS_DOMAIN_ID=3 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim playRosbag.py /shared/bags/70m_robot_tf -t /tf_static /humidity /temperature /detectedImages /status/battery /status/tempSensor &> player.log &"
    cexec robot2 "export ROS_DOMAIN_ID=4 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim playRosbag.py /shared/bags/70m_robot_tf -t /tf_static /humidity /temperature /detectedImages /status/battery /status/tempSensor &> player.log &"
    # more sensors
    cexec robot0 "export ROS_DOMAIN_ID=2 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_robot other_sensors &"
    cexec robot1 "export ROS_DOMAIN_ID=3 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_robot other_sensors &"
    cexec robot2 "export ROS_DOMAIN_ID=4 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_robot other_sensors &"
    # position
    cexec robot0 "export ROS_DOMAIN_ID=2 && export REMOTE_CORE=http://172.16.0.254:50051 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim corePosNode.py robot0&"
    cexec robot1 "export ROS_DOMAIN_ID=3 && export REMOTE_CORE=http://172.16.0.254:50051 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim corePosNode.py robot1&"
    cexec robot2 "export ROS_DOMAIN_ID=4 && export REMOTE_CORE=http://172.16.0.254:50051 && source /shared/ros_ws/install/setup.bash && ros2 run dtn_sim corePosNode.py robot2&"
    # random msgs
    randomDtnActivity.py &> $RESULTS_DIR/dtnActivity.log &
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
    pgrep -f 'playRosbag.py' | xargs kill
    pgrep -f 'randomDtnActivity.py' | xargs kill
    pgrep -f 'corePosNode.py' | xargs kill
    pgrep -f 'dtn_robot/other_sensors' | xargs kill -2
    pgrep -f 'dtn_proxy/dtnproxy' | xargs kill -2
    pgrep -f 'dtnd' | xargs kill
    
    # Workarounds
    mv /shared/experiment.log $RESULTS_DIR/experiment.log
}

# Called after logs have been collected from all nodes
# analyze() {
#     echo "analyze hook - results in $1"
#     # collect number of sent messages and received messages
#     SENT=$(cat $1/n1/sent.log | wc -l)
#     RECEIVED=$(cat $1/n3/recv.log | wc -l)
# }
