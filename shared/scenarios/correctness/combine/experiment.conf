# BEWARE: this config is sourced by bash, shell syntax rules apply!

NAME=correctness_combine

# animated scenarios must have the link to the mobility model to a file in /shared
# autostart should be enabled for the movement
# node mapping must fit the scenario
# movements can be generated using bonnmotion
SCENARIO=two_nodes.xml

# optional core automator recording, will be played in a loop
# AUTOMATOR=delayed_msg.pos

GUI=0

MONITOR_PIDSTAT=1
# monitor specific process name (default, all on node -> no graph plotting!)
MONITOR_PIDSTAT_PARAMS="dtnproxy"

MONITOR_NET=1
# interface to monitor (default: all interfaces up)
MONITOR_NET_PARAMS="eth0"

MONITOR_XY=0
# Delay in seconds between recordings
#MONITOR_XY_PARAMS="5"

MONITOR_CONTACTS=0
# Delay in seconds between recordings
#MONITOR_CONTACTS_PARAMS="5"

# commands to execute at beginning of simulation
#START_EXEC=("echo started > started.log" "echo second > second.log")

# commands to daemonize at beginning of simulation, e.g., dtnd
# START_DAEMONIZED=('dtnd -C tcp -n $(hostname) -j 3s -i 2s -p 5s -d')

# usually commands started at the beginning of the simulation are put here for shutdown
# SHUTDOWN_PROCS="dtnd"

# let simulation warm up for a period of time if needed
#WARMUP=5

# run simulation for this long
# without RUNTIME simulation will run until a shutdown.txt is found in the shared volume
RUNTIME=90

COLLECT_EVERYTHING=0

# Called right after initializing the simulation, prior to any monitoring or START_EXEC/START_DAEMONIZED
# pre() {
#     echo "pre hook - results in $1"
#     cp /shared/bin/* /usr/local/bin
#     cp /shared/recv_logger /usr/local/bin
# }

# Called right after starting monitoring and/or START_EXEC/START_DAEMONIZED
start() {
    cexec base "export ROS_DOMAIN_ID=1 && source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/base.toml > dtnproxy.log &"
    sleep 1
    cexec robot "source /shared/ros_ws/install/setup.bash && ros2 launch dtn_proxy default_launch.py log_level:=INFO configurationPath:=$BASEDIR/configs/robot.toml > dtnproxy.log &"
    cexec robot "source /shared/ros_ws/install/setup.bash && $BASEDIR/msgGenerator.py > generator.log &"
}

# Called after simulation time is over but prior to collecting logs
post() {
    echo "post hook - results in $1"
    pgrep -f 'msgGenerator.py' | xargs kill
    pgrep -f 'dtn_proxy/dtnproxy' | xargs kill -2
    
    # Workarounds
    mv /shared/experiment.log $BASEDIR/experiment.log
}

# Called after logs have been collected from all nodes
# analyze() {
#     echo "analyze hook - results in $1"
#     # collect number of sent messages and received messages
#     SENT=$(cat $1/n1/sent.log | wc -l)
#     RECEIVED=$(cat $1/n3/recv.log | wc -l)
# }
